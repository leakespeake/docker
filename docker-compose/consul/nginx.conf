# The 'main' context is here, outside any other contexts

# The 'events' context is used to set global options that affect how nginx handles connections
events {}

# The 'http' context is used to define the web server or reverse proxy configuration, containing all the directives and other contexts necessary to define how the program will handle HTTP or HTTPS connections
http {
    # The 'upstream' context defines a named pool of servers that nginx can then proxy requests to
    upstream consul_servers {
        server consul-server1:8500;
        server consul-server2:8500;
        server consul-server3:8500;
    }

    # The 'server' context is declared within the 'http' context and defines a specific virtual server to handle client requests - you can have as many 'server' blocks as is required
    
    # Listen on 80 (to redirect to 443)
    server {
        listen              80;
        server_name         consul-prd-01.int.leakespeake.com;
        # redirect all http (80) requests to https (443)
        return 301 https://$host$request_uri;
    }

    # Listen on 443
    server {
        listen              443 ssl;
        server_name         consul-prd-01.int.leakespeake.com;

        # Lets encrypt fullchain and private key files
        ssl_certificate     /etc/ssl/fullchain10.pem;
        ssl_certificate_key /etc/ssl/privkey10.pem;

        # The 'location' context - multiple blocks can be defined with each used to handle a certain type of client request by requested URI
        location / {
            # The reverse proxy directive
            proxy_pass          http://consul_servers;   # the 'upstream' context named pool
            proxy_redirect      default;

            # The proxy_params header forwarding settings and the variable nginx keeps the value in (i.e. Host is kept in $host)
            proxy_set_header    Host                $host;                          # Host contains the original host requested by the client (the website domain and port)
            proxy_set_header    X-Real-IP           $remote_addr;                   # X-Real-IP contains a single IP address that belongs to the remote client
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;     # X-Forwarded-For contains the IP address of the client who sent the original request (can also contain a list of IP's)
            proxy_set_header    X-Forwarded-Proto   $scheme;                        # X-Forwarded-Proto contains the protocol used by the original client to connect (HTTP or HTTPS)
            proxy_set_header    X-Forwarded-Host    $host;                          # X-Forwarded-Host identifies the original host requested that a client used to connect
        }    
    }
}